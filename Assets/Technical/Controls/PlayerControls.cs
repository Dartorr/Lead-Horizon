//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Technical/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MovementMap"",
            ""id"": ""e823e228-49ba-4120-89d8-900997bbe20e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""91e49a81-8a8e-43c0-ab64-d2eece300d81"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bad254c9-0414-4da7-8501-54e7092ef558"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e6255e72-5460-414a-832d-9253a0d2f3fc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""85786ff8-f187-49b1-a721-7118965dfdea"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""da9eb67d-d873-436a-bde8-94b7b7062353"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""da090419-dfa1-44bb-92f9-cc6ab56466f2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5c09e83a-e78a-49a1-a4a5-ace54bef3cca"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseMap"",
            ""id"": ""db6d7b35-80f4-4dfd-9647-49ad62fb49aa"",
            ""actions"": [
                {
                    ""name"": ""MouseMoved"",
                    ""type"": ""Value"",
                    ""id"": ""af5174a7-025a-40d2-91a8-95664d63d87d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e5e4dc64-8899-4449-971b-9d0013d21418"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6fc72f8-f5da-4ddd-a557-616f8b81b1b3"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMoved"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3b10750-cc9c-4213-9268-d42a304dd1e0"",
                    ""path"": ""<DualShockGamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AbilityMap"",
            ""id"": ""c1885414-c5d5-4c76-9995-01ff4113e856"",
            ""actions"": [
                {
                    ""name"": ""Ability"",
                    ""type"": ""Button"",
                    ""id"": ""b49f4dc6-7356-447c-beb1-302220c77d75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""c59de263-873b-4ae1-a53a-b9cb218f6fc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99f769b6-aefc-40e9-9eb9-9cc1b4bb661f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbbaa3bb-5d9a-4674-93f9-7b7b57e37164"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WeaponMap"",
            ""id"": ""336a7f6b-cc2f-4915-af8a-9e27a482615c"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""926f75f9-4896-4669-bd43-c778d491312c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b09c9272-22ef-42a9-a9fe-9a7cedff0546"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change"",
                    ""type"": ""Value"",
                    ""id"": ""9da69868-ffa0-44aa-a1db-59b0c6226e49"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4d9f50a-2402-4f7d-b550-aa2113ed0531"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9636e736-58e1-4ae3-93e3-534f24b373e9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a12b694-1d3e-4459-9fc0-a9f13a52d795"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementMap
        m_MovementMap = asset.FindActionMap("MovementMap", throwIfNotFound: true);
        m_MovementMap_Movement = m_MovementMap.FindAction("Movement", throwIfNotFound: true);
        // MouseMap
        m_MouseMap = asset.FindActionMap("MouseMap", throwIfNotFound: true);
        m_MouseMap_MouseMoved = m_MouseMap.FindAction("MouseMoved", throwIfNotFound: true);
        m_MouseMap_RightStick = m_MouseMap.FindAction("RightStick", throwIfNotFound: true);
        // AbilityMap
        m_AbilityMap = asset.FindActionMap("AbilityMap", throwIfNotFound: true);
        m_AbilityMap_Ability = m_AbilityMap.FindAction("Ability", throwIfNotFound: true);
        m_AbilityMap_Dash = m_AbilityMap.FindAction("Dash", throwIfNotFound: true);
        // WeaponMap
        m_WeaponMap = asset.FindActionMap("WeaponMap", throwIfNotFound: true);
        m_WeaponMap_Shoot = m_WeaponMap.FindAction("Shoot", throwIfNotFound: true);
        m_WeaponMap_Reload = m_WeaponMap.FindAction("Reload", throwIfNotFound: true);
        m_WeaponMap_Change = m_WeaponMap.FindAction("Change", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementMap
    private readonly InputActionMap m_MovementMap;
    private List<IMovementMapActions> m_MovementMapActionsCallbackInterfaces = new List<IMovementMapActions>();
    private readonly InputAction m_MovementMap_Movement;
    public struct MovementMapActions
    {
        private @PlayerControls m_Wrapper;
        public MovementMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MovementMap_Movement;
        public InputActionMap Get() { return m_Wrapper.m_MovementMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementMapActions set) { return set.Get(); }
        public void AddCallbacks(IMovementMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMovementMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMovementMapActions instance)
        {
            if (m_Wrapper.m_MovementMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementMapActions @MovementMap => new MovementMapActions(this);

    // MouseMap
    private readonly InputActionMap m_MouseMap;
    private List<IMouseMapActions> m_MouseMapActionsCallbackInterfaces = new List<IMouseMapActions>();
    private readonly InputAction m_MouseMap_MouseMoved;
    private readonly InputAction m_MouseMap_RightStick;
    public struct MouseMapActions
    {
        private @PlayerControls m_Wrapper;
        public MouseMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMoved => m_Wrapper.m_MouseMap_MouseMoved;
        public InputAction @RightStick => m_Wrapper.m_MouseMap_RightStick;
        public InputActionMap Get() { return m_Wrapper.m_MouseMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseMapActions set) { return set.Get(); }
        public void AddCallbacks(IMouseMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseMapActionsCallbackInterfaces.Add(instance);
            @MouseMoved.started += instance.OnMouseMoved;
            @MouseMoved.performed += instance.OnMouseMoved;
            @MouseMoved.canceled += instance.OnMouseMoved;
            @RightStick.started += instance.OnRightStick;
            @RightStick.performed += instance.OnRightStick;
            @RightStick.canceled += instance.OnRightStick;
        }

        private void UnregisterCallbacks(IMouseMapActions instance)
        {
            @MouseMoved.started -= instance.OnMouseMoved;
            @MouseMoved.performed -= instance.OnMouseMoved;
            @MouseMoved.canceled -= instance.OnMouseMoved;
            @RightStick.started -= instance.OnRightStick;
            @RightStick.performed -= instance.OnRightStick;
            @RightStick.canceled -= instance.OnRightStick;
        }

        public void RemoveCallbacks(IMouseMapActions instance)
        {
            if (m_Wrapper.m_MouseMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseMapActions @MouseMap => new MouseMapActions(this);

    // AbilityMap
    private readonly InputActionMap m_AbilityMap;
    private List<IAbilityMapActions> m_AbilityMapActionsCallbackInterfaces = new List<IAbilityMapActions>();
    private readonly InputAction m_AbilityMap_Ability;
    private readonly InputAction m_AbilityMap_Dash;
    public struct AbilityMapActions
    {
        private @PlayerControls m_Wrapper;
        public AbilityMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Ability => m_Wrapper.m_AbilityMap_Ability;
        public InputAction @Dash => m_Wrapper.m_AbilityMap_Dash;
        public InputActionMap Get() { return m_Wrapper.m_AbilityMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AbilityMapActions set) { return set.Get(); }
        public void AddCallbacks(IAbilityMapActions instance)
        {
            if (instance == null || m_Wrapper.m_AbilityMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AbilityMapActionsCallbackInterfaces.Add(instance);
            @Ability.started += instance.OnAbility;
            @Ability.performed += instance.OnAbility;
            @Ability.canceled += instance.OnAbility;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IAbilityMapActions instance)
        {
            @Ability.started -= instance.OnAbility;
            @Ability.performed -= instance.OnAbility;
            @Ability.canceled -= instance.OnAbility;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IAbilityMapActions instance)
        {
            if (m_Wrapper.m_AbilityMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAbilityMapActions instance)
        {
            foreach (var item in m_Wrapper.m_AbilityMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AbilityMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AbilityMapActions @AbilityMap => new AbilityMapActions(this);

    // WeaponMap
    private readonly InputActionMap m_WeaponMap;
    private List<IWeaponMapActions> m_WeaponMapActionsCallbackInterfaces = new List<IWeaponMapActions>();
    private readonly InputAction m_WeaponMap_Shoot;
    private readonly InputAction m_WeaponMap_Reload;
    private readonly InputAction m_WeaponMap_Change;
    public struct WeaponMapActions
    {
        private @PlayerControls m_Wrapper;
        public WeaponMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_WeaponMap_Shoot;
        public InputAction @Reload => m_Wrapper.m_WeaponMap_Reload;
        public InputAction @Change => m_Wrapper.m_WeaponMap_Change;
        public InputActionMap Get() { return m_Wrapper.m_WeaponMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponMapActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponMapActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponMapActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @Change.started += instance.OnChange;
            @Change.performed += instance.OnChange;
            @Change.canceled += instance.OnChange;
        }

        private void UnregisterCallbacks(IWeaponMapActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @Change.started -= instance.OnChange;
            @Change.performed -= instance.OnChange;
            @Change.canceled -= instance.OnChange;
        }

        public void RemoveCallbacks(IWeaponMapActions instance)
        {
            if (m_Wrapper.m_WeaponMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponMapActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponMapActions @WeaponMap => new WeaponMapActions(this);
    public interface IMovementMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IMouseMapActions
    {
        void OnMouseMoved(InputAction.CallbackContext context);
        void OnRightStick(InputAction.CallbackContext context);
    }
    public interface IAbilityMapActions
    {
        void OnAbility(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IWeaponMapActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnChange(InputAction.CallbackContext context);
    }
}
